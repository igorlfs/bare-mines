#include "input.hpp"
#include "actions.hpp"
#include "msgassert.hpp"
#include <regex>

using std::getline;
using std::istream;
using std::make_pair;
using std::ostream;
using std::pair;
using std::regex;
using std::regex_match;
using std::string;
using std::stringstream;

void Input::greetPosition(ostream &outStream) {
    outStream << "\nPosiÃ§Ãµes vÃ¡lidas:\n"
                 "Uma posiÃ§Ã£o vÃ¡lida Ã© composta por uma letra MAIÃšSCULA"
              << " e um nÃºmero (necessariamente nessa ordem).\n"
              << "Exemplos de posiÃ§Ãµes vÃ¡lidas sÃ£o: A2, C5, D4\n\n";
}

pair<int, int> Input::getPosition(istream &inStream, ostream &outStream) {
    outStream << "Escolha uma posiÃ§Ã£o: ";
    const regex EXPECTED_FORMAT("[A-Z][1-9][0-9]*");
    string readLine;
    char row;
    int column;

    getline(inStream, readLine);
    assertUser(!inStream.eof(), "A entrada de dados foi interrompida. Saindo.");

    if (!regex_match(readLine, EXPECTED_FORMAT)) {
        outStream << "\nEntrada InvÃ¡lida. Atente-se aos exemplos de entrada.\n";
        return {0, 0};
    }

    stringstream ss(readLine);
    ss >> row >> column;
    return make_pair((row - (int)'A') + 1, column);
}

void Input::greetAction(ostream &outStream) {
    outStream << "AÃ§Ãµes disponÃ­veis: \n"
              << Actions::SHOW << " - revelar: vocÃª sabe ðŸ˜‰\n"
              << Actions::MARK
              << " - marcar: sinalize onde vocÃª suspeita que existe uma bomba. "
                 "NecessÃ¡rio para ganhar.\n"
              << Actions::UNMARK
              << " - desmarcar: use se mudou de ideia em relaÃ§Ã£o a uma "
                 "posiÃ§Ã£o marcada\n\n";
}

char Input::getAction(istream &inStream, ostream &outStream) {
    outStream << "Escolha uma aÃ§Ã£o: ";
    const regex EXPECTED_FORMAT("[a-z]");
    string readLine;
    char action;

    getline(inStream, readLine);

    assertUser(!inStream.eof(), "A entrada de dados foi interrompida. Saindo.");
    if (!regex_match(readLine, EXPECTED_FORMAT)) {
        outStream << "\nAtenÃ§Ã£o! A aÃ§Ã£o Ã© UMA letra minÃºscula.\n\n";
        return 0;
    }

    stringstream ss(readLine);
    ss >> action;

    if (action != Actions::SHOW && action != Actions::MARK &&
        action != Actions::UNMARK) {
        outStream << "\nAtenÃ§Ã£o! A aÃ§Ã£o deve ser uma das letras minÃºsculas "
                     "apresentadas\n\n";
        return 0;
    }

    return action;
}
