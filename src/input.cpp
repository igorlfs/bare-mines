#include "input.hpp"
#include "actions.hpp"
#include <iostream>
#include <regex>

using std::cerr;
using std::cin;
using std::cout;
using std::getline;
using std::make_pair;
using std::pair;
using std::regex;
using std::regex_match;
using std::string;
using std::stringstream;

void Input::greetPosition() {
    cout << "\nPosiÃ§Ãµes vÃ¡lidas:\n"
            "Uma posiÃ§Ã£o vÃ¡lida Ã© composta por uma letra MAIÃšSCULA"
         << " e um nÃºmero (necessariamente nessa ordem).\n"
         << "Exemplos de posiÃ§Ãµes vÃ¡lidas sÃ£o: A2, C5, D4\n\n";
}

pair<int, int> Input::getPosition() {
insertAgain:
    cout << "Escolha uma posiÃ§Ã£o: ";
    try {
        const regex EXPECTED_FORMAT("[A-Z][1-9][0-9]*");
        string readLine;
        char row;
        int column;

        getline(cin, readLine);
        if (cin.eof()) {
            throw interrupt();
        }
        if (!regex_match(readLine, EXPECTED_FORMAT)) {
            throw invalidPositionFormat();
        }

        stringstream ss(readLine);
        ss >> row >> column;
        return make_pair((int)(row - (int)'A') + 1, column);
    } catch (interrupt e) {
        cerr << "\n\nA entrada de dados foi interrompida. Saindo.\n\n";
        exit(1);
    } catch (invalidPositionFormat e) {
        cout << "\nEntrada InvÃ¡lida. Atente-se aos exemplos de entrada.\n";
        goto insertAgain;
    }
}

void Input::greetAction() {
    cout << "AÃ§Ãµes disponÃ­veis: \n"
         << Actions::SHOW << " - revelar: vocÃª sabe ðŸ˜‰\n"
         << Actions::MARK
         << " - marcar: sinalize onde vocÃª suspeita que existe uma bomba. "
            "NecessÃ¡rio para ganhar.\n"
         << Actions::UNMARK
         << " - desmarcar: use se mudou de ideia em relaÃ§Ã£o a uma "
            "posiÃ§Ã£o marcada\n\n";
}

char Input::getAction() {
insertAgain:
    cout << "Escolha uma aÃ§Ã£o: ";
    try {
        const regex EXPECTED_FORMAT("[a-z]");
        string readLine;
        char action;

        getline(cin, readLine);

        if (cin.eof()) {
            throw interrupt();
        }
        if (!regex_match(readLine, EXPECTED_FORMAT)) {
            throw invalidActionFormat();
        }

        stringstream ss(readLine);
        ss >> action;

        if (action != Actions::SHOW && action != Actions::MARK &&
            action != Actions::UNMARK) {
            throw invalidAction();
        }

        return action;
    } catch (interrupt e) {
        cerr << "\n\nA entrada de dados foi interrompida. Saindo.\n\n";
        exit(1);
    } catch (invalidActionFormat e) {
        cout << "\nAtenÃ§Ã£o! A aÃ§Ã£o Ã© UMA letra minÃºscula.\n\n";
        goto insertAgain;
    } catch (invalidAction e) {
        cout << "\nAtenÃ§Ã£o! A aÃ§Ã£o dever ser uma das letras minÃºsculas "
                "apresentadas\n\n";
        goto insertAgain;
    }
}
